---
import { Picture, getImage } from "astro:assets";
import { getCachedImage } from "../../image_cache";
import { getBase64Placeholder } from "../../image_placeholder";

const { upload, css_class = "" } = Astro.props;

if (!upload) {
    return;
}

const url = await getCachedImage(upload);

var images = await import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/*.{webp,jpeg,jpg,png,gif}",
);

if (!images[url]) {
    console.log(`retrying astro glob import for image ${url}`);
}

while (!images[url]) {
    images = await import.meta.glob<{ default: ImageMetadata }>(
        "/src/assets/*.{webp,jpeg,jpg,png,gif}",
    );
}

const dynamicImage = await getImage({
    src: images[url](),
    format: "webp",
    fallbackFormat: "jpg",
    widths: [360, 540, 720, 1200, 1600, upload.width],
    sizes: `(max-width: 360px) 360px, (max-width: 540px) 540px, (max-width: 720px) 720px, (max-width: 1200px) 1200px, (max-width: 1600px) 1600px, ${upload.width}px`,
});

const base64 = import.meta.env.PROD ? await getBase64Placeholder(url) : "";
---

<a
    href={dynamicImage.src}
    class="m-1 md:m-2 block relative overflow-hidden"
    data-pswp-width={upload.width}
    data-pswp-height={upload.height}
    data-pswp-srcset={dynamicImage.srcSet.attribute}
    target="_blank"
>
    <img
        aria-hidden
        alt=""
        class="absolute inset-0 w-full h-full transform scale-150 filter blur-2xl z-[-1] placeholder-image"
        src={base64}
    />
    <Picture
        src={images[url]()}
        format="webp"
        fallbackFormat="jpg"
        class="opacity-0 transition-opacity duration-200 ease-in-out"
        widths={[360, 540, 720, 1200, 1600, upload.width]}
        sizes="50vw"
        inferSize
        alt={upload.alt || ""}
        onload={"const t = event.target; setTimeout(() => {console.log(t); t.parentElement.previousElementSibling.remove()}, 300); this.style.opacity = 1;"}
    />
</a>

<!--
        style={`background-size:cover;background-position:center;background-repeat:no-repeat;background-image:url('${base64}')`}
        --
    >-->
